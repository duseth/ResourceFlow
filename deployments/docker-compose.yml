version: '3.8'

services:
  # Nginx reverse proxy
  nginx:
    build:
      context: ../nginx
      dockerfile: Dockerfile
    container_name: resourceflow-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - frontend-network
    volumes:
      - ../nginx/ssl:/etc/nginx/ssl:ro
      - ../nginx/conf.d:/etc/nginx/conf.d:ro

  # Frontend
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: resourceflow-frontend
    restart: unless-stopped
    expose:
      - "3000"
    networks:
      - frontend-network
    depends_on:
      - backend

  # Backend
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: resourceflow-backend
    restart: unless-stopped
    expose:
      - "8080"
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - APP_ENV=${APP_ENV}
    networks:
      - backend-network
      - frontend-network
    depends_on:
      - postgres
      - redis

  # PostgreSQL + TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg14
    container_name: resourceflow-postgres
    restart: unless-stopped
    expose:
      - "5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend-network

  # Redis
  redis:
    image: redis:7-alpine
    container_name: resourceflow-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    expose:
      - "6379"
    volumes:
      - redis_data:/data
    networks:
      - backend-network

networks:
  frontend-network:
    internal: false
  backend-network:
    internal: true

volumes:
  postgres_data:
  redis_data: 